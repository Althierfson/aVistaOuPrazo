// Mocks generated by Mockito 5.3.2 from annotations
// in avistaouaprazo/test/features/vistaOuPrazo/presentation/vistaouprazo_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:avistaouaprazo/core/error/falhas.dart' as _i7;
import 'package:avistaouaprazo/core/util/calcular_rendimento.dart' as _i3;
import 'package:avistaouaprazo/core/util/tipo_de_taxa.dart' as _i10;
import 'package:avistaouaprazo/features/vistaOuPrazo/domain/entities/resultado.dart'
    as _i8;
import 'package:avistaouaprazo/features/vistaOuPrazo/domain/entities/taxas.dart'
    as _i9;
import 'package:avistaouaprazo/features/vistaOuPrazo/domain/repositories/vista_ou_prazo_repository.dart'
    as _i2;
import 'package:avistaouaprazo/features/vistaOuPrazo/domain/usecases/calcular_com_taxa_personalizada.dart'
    as _i11;
import 'package:avistaouaprazo/features/vistaOuPrazo/domain/usecases/calcular_valor.dart'
    as _i5;
import 'package:dartz/dartz.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeVistaOuPrazoRepository_0 extends _i1.SmartFake
    implements _i2.VistaOuPrazoRepository {
  _FakeVistaOuPrazoRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCalcularRendimento_1 extends _i1.SmartFake
    implements _i3.CalcularRendimento {
  _FakeCalcularRendimento_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_2<L, R> extends _i1.SmartFake implements _i4.Either<L, R> {
  _FakeEither_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CalcularValor].
///
/// See the documentation for Mockito's code generation for more information.
class MockCalcularValor extends _i1.Mock implements _i5.CalcularValor {
  @override
  _i2.VistaOuPrazoRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeVistaOuPrazoRepository_0(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeVistaOuPrazoRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.VistaOuPrazoRepository);
  @override
  _i3.CalcularRendimento get calcularRendimento => (super.noSuchMethod(
        Invocation.getter(#calcularRendimento),
        returnValue: _FakeCalcularRendimento_1(
          this,
          Invocation.getter(#calcularRendimento),
        ),
        returnValueForMissingStub: _FakeCalcularRendimento_1(
          this,
          Invocation.getter(#calcularRendimento),
        ),
      ) as _i3.CalcularRendimento);
  @override
  _i6.Future<_i4.Either<_i7.Falha, _i8.Resultado>> call(
          _i5.CalcularValorParametro? parametro) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [parametro],
        ),
        returnValue: _i6.Future<_i4.Either<_i7.Falha, _i8.Resultado>>.value(
            _FakeEither_2<_i7.Falha, _i8.Resultado>(
          this,
          Invocation.method(
            #call,
            [parametro],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i4.Either<_i7.Falha, _i8.Resultado>>.value(
                _FakeEither_2<_i7.Falha, _i8.Resultado>(
          this,
          Invocation.method(
            #call,
            [parametro],
          ),
        )),
      ) as _i6.Future<_i4.Either<_i7.Falha, _i8.Resultado>>);
  @override
  double getTaxaEscolhida(
    _i9.Taxas? taxas,
    _i10.TipoDeTaxa? tipoDeTaxa,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTaxaEscolhida,
          [
            taxas,
            tipoDeTaxa,
          ],
        ),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);
}

/// A class which mocks [CalcularComTaxaPersonalizada].
///
/// See the documentation for Mockito's code generation for more information.
class MockCalcularComTaxaPersonalizada extends _i1.Mock
    implements _i11.CalcularComTaxaPersonalizada {
  @override
  _i3.CalcularRendimento get calcularRendimento => (super.noSuchMethod(
        Invocation.getter(#calcularRendimento),
        returnValue: _FakeCalcularRendimento_1(
          this,
          Invocation.getter(#calcularRendimento),
        ),
        returnValueForMissingStub: _FakeCalcularRendimento_1(
          this,
          Invocation.getter(#calcularRendimento),
        ),
      ) as _i3.CalcularRendimento);
  @override
  _i6.Future<_i4.Either<_i7.Falha, _i8.Resultado>> call(
          _i11.CalcularComTaxaPersonalizadaParametro? parametro) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [parametro],
        ),
        returnValue: _i6.Future<_i4.Either<_i7.Falha, _i8.Resultado>>.value(
            _FakeEither_2<_i7.Falha, _i8.Resultado>(
          this,
          Invocation.method(
            #call,
            [parametro],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i4.Either<_i7.Falha, _i8.Resultado>>.value(
                _FakeEither_2<_i7.Falha, _i8.Resultado>(
          this,
          Invocation.method(
            #call,
            [parametro],
          ),
        )),
      ) as _i6.Future<_i4.Either<_i7.Falha, _i8.Resultado>>);
}
