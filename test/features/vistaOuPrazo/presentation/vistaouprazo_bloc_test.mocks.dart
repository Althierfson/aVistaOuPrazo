// Mocks generated by Mockito 5.3.2 from annotations
// in avistaouaprazo/test/features/vistaOuPrazo/presentation/vistaouprazo_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;

import 'package:avistaouaprazo/core/error/falhas.dart' as _i9;
import 'package:avistaouaprazo/core/util/convert_to_string_real.dart' as _i3;
import 'package:avistaouaprazo/core/util/tipo_de_taxa.dart' as _i11;
import 'package:avistaouaprazo/features/vistaOuPrazo/domain/entities/resultado.dart'
    as _i5;
import 'package:avistaouaprazo/features/vistaOuPrazo/domain/entities/taxas.dart'
    as _i10;
import 'package:avistaouaprazo/features/vistaOuPrazo/domain/repositories/vista_ou_prazo_repository.dart'
    as _i2;
import 'package:avistaouaprazo/features/vistaOuPrazo/domain/usecases/calcular_valor.dart'
    as _i7;
import 'package:dartz/dartz.dart' as _i4;
import 'package:decimal/decimal.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeVistaOuPrazoRepository_0 extends _i1.SmartFake
    implements _i2.VistaOuPrazoRepository {
  _FakeVistaOuPrazoRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeConvertTo_1 extends _i1.SmartFake implements _i3.ConvertTo {
  _FakeConvertTo_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_2<L, R> extends _i1.SmartFake implements _i4.Either<L, R> {
  _FakeEither_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResultado_3 extends _i1.SmartFake implements _i5.Resultado {
  _FakeResultado_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDecimal_4 extends _i1.SmartFake implements _i6.Decimal {
  _FakeDecimal_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CalcularValor].
///
/// See the documentation for Mockito's code generation for more information.
class MockCalcularValor extends _i1.Mock implements _i7.CalcularValor {
  @override
  _i2.VistaOuPrazoRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeVistaOuPrazoRepository_0(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeVistaOuPrazoRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.VistaOuPrazoRepository);
  @override
  _i3.ConvertTo get convertTo => (super.noSuchMethod(
        Invocation.getter(#convertTo),
        returnValue: _FakeConvertTo_1(
          this,
          Invocation.getter(#convertTo),
        ),
        returnValueForMissingStub: _FakeConvertTo_1(
          this,
          Invocation.getter(#convertTo),
        ),
      ) as _i3.ConvertTo);
  @override
  _i8.Future<_i4.Either<_i9.Falha, _i5.Resultado>> call(
          _i7.CalcularValorParametro? parametro) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [parametro],
        ),
        returnValue: _i8.Future<_i4.Either<_i9.Falha, _i5.Resultado>>.value(
            _FakeEither_2<_i9.Falha, _i5.Resultado>(
          this,
          Invocation.method(
            #call,
            [parametro],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i4.Either<_i9.Falha, _i5.Resultado>>.value(
                _FakeEither_2<_i9.Falha, _i5.Resultado>(
          this,
          Invocation.method(
            #call,
            [parametro],
          ),
        )),
      ) as _i8.Future<_i4.Either<_i9.Falha, _i5.Resultado>>);
  @override
  _i5.Resultado calcularRendimentoAVista(
    _i7.CalcularValorParametro? parametro,
    _i6.Decimal? taxa,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #calcularRendimentoAVista,
          [
            parametro,
            taxa,
          ],
        ),
        returnValue: _FakeResultado_3(
          this,
          Invocation.method(
            #calcularRendimentoAVista,
            [
              parametro,
              taxa,
            ],
          ),
        ),
        returnValueForMissingStub: _FakeResultado_3(
          this,
          Invocation.method(
            #calcularRendimentoAVista,
            [
              parametro,
              taxa,
            ],
          ),
        ),
      ) as _i5.Resultado);
  @override
  _i5.Resultado calcularRedimentoAPrazo(
    _i7.CalcularValorParametro? parametro,
    _i6.Decimal? taxa,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #calcularRedimentoAPrazo,
          [
            parametro,
            taxa,
          ],
        ),
        returnValue: _FakeResultado_3(
          this,
          Invocation.method(
            #calcularRedimentoAPrazo,
            [
              parametro,
              taxa,
            ],
          ),
        ),
        returnValueForMissingStub: _FakeResultado_3(
          this,
          Invocation.method(
            #calcularRedimentoAPrazo,
            [
              parametro,
              taxa,
            ],
          ),
        ),
      ) as _i5.Resultado);
  @override
  _i6.Decimal calcularRendimentoNoMes(
    _i6.Decimal? valor,
    _i6.Decimal? taxa,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #calcularRendimentoNoMes,
          [
            valor,
            taxa,
          ],
        ),
        returnValue: _FakeDecimal_4(
          this,
          Invocation.method(
            #calcularRendimentoNoMes,
            [
              valor,
              taxa,
            ],
          ),
        ),
        returnValueForMissingStub: _FakeDecimal_4(
          this,
          Invocation.method(
            #calcularRendimentoNoMes,
            [
              valor,
              taxa,
            ],
          ),
        ),
      ) as _i6.Decimal);
  @override
  _i6.Decimal calculcarTributos(
    _i6.Decimal? rendimento,
    _i6.Decimal? taxa,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #calculcarTributos,
          [
            rendimento,
            taxa,
          ],
        ),
        returnValue: _FakeDecimal_4(
          this,
          Invocation.method(
            #calculcarTributos,
            [
              rendimento,
              taxa,
            ],
          ),
        ),
        returnValueForMissingStub: _FakeDecimal_4(
          this,
          Invocation.method(
            #calculcarTributos,
            [
              rendimento,
              taxa,
            ],
          ),
        ),
      ) as _i6.Decimal);
  @override
  _i6.Decimal getTaxaDeTributos(int? numeroDeMeses) => (super.noSuchMethod(
        Invocation.method(
          #getTaxaDeTributos,
          [numeroDeMeses],
        ),
        returnValue: _FakeDecimal_4(
          this,
          Invocation.method(
            #getTaxaDeTributos,
            [numeroDeMeses],
          ),
        ),
        returnValueForMissingStub: _FakeDecimal_4(
          this,
          Invocation.method(
            #getTaxaDeTributos,
            [numeroDeMeses],
          ),
        ),
      ) as _i6.Decimal);
  @override
  _i6.Decimal getTaxaEscolhida(
    _i10.Taxas? taxas,
    _i11.TipoDeTaxa? tipoDeTaxa,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTaxaEscolhida,
          [
            taxas,
            tipoDeTaxa,
          ],
        ),
        returnValue: _FakeDecimal_4(
          this,
          Invocation.method(
            #getTaxaEscolhida,
            [
              taxas,
              tipoDeTaxa,
            ],
          ),
        ),
        returnValueForMissingStub: _FakeDecimal_4(
          this,
          Invocation.method(
            #getTaxaEscolhida,
            [
              taxas,
              tipoDeTaxa,
            ],
          ),
        ),
      ) as _i6.Decimal);
  @override
  _i5.Resultado joinResultado({
    required _i5.Resultado? resultadoAPrazo,
    required _i5.Resultado? resultadoAVista,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #joinResultado,
          [],
          {
            #resultadoAPrazo: resultadoAPrazo,
            #resultadoAVista: resultadoAVista,
          },
        ),
        returnValue: _FakeResultado_3(
          this,
          Invocation.method(
            #joinResultado,
            [],
            {
              #resultadoAPrazo: resultadoAPrazo,
              #resultadoAVista: resultadoAVista,
            },
          ),
        ),
        returnValueForMissingStub: _FakeResultado_3(
          this,
          Invocation.method(
            #joinResultado,
            [],
            {
              #resultadoAPrazo: resultadoAPrazo,
              #resultadoAVista: resultadoAVista,
            },
          ),
        ),
      ) as _i5.Resultado);
  @override
  _i6.Decimal fromDoubleToDecimal(double? valor) => (super.noSuchMethod(
        Invocation.method(
          #fromDoubleToDecimal,
          [valor],
        ),
        returnValue: _FakeDecimal_4(
          this,
          Invocation.method(
            #fromDoubleToDecimal,
            [valor],
          ),
        ),
        returnValueForMissingStub: _FakeDecimal_4(
          this,
          Invocation.method(
            #fromDoubleToDecimal,
            [valor],
          ),
        ),
      ) as _i6.Decimal);
  @override
  _i6.Decimal fromStringToDecimal(String? valor) => (super.noSuchMethod(
        Invocation.method(
          #fromStringToDecimal,
          [valor],
        ),
        returnValue: _FakeDecimal_4(
          this,
          Invocation.method(
            #fromStringToDecimal,
            [valor],
          ),
        ),
        returnValueForMissingStub: _FakeDecimal_4(
          this,
          Invocation.method(
            #fromStringToDecimal,
            [valor],
          ),
        ),
      ) as _i6.Decimal);
  @override
  String fromDecimalToStringReal(_i6.Decimal? valor) => (super.noSuchMethod(
        Invocation.method(
          #fromDecimalToStringReal,
          [valor],
        ),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  double fromDecimalToDouble(_i6.Decimal? valor) => (super.noSuchMethod(
        Invocation.method(
          #fromDecimalToDouble,
          [valor],
        ),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);
}
